/**
 * @license
 jQuery UI - v1.13.1 - 2022-05-19
 http://jqueryui.com
 Includes: keycode.js, widgets/datepicker.js
 Copyright jQuery Foundation and other contributors; Licensed MIT */
'use strict';
!function (factory) {
   if ("function" == typeof define && define.amd) {
      define(["jquery"], factory);
   } else {
      factory(jQuery);
   }
}(function ($) {
   /**
    * @return {undefined}
    */
   function Datepicker() {
      /** @type {null} */
      this._curInst = null;
      /** @type {boolean} */
      this._keyEvent = false;
      /** @type {!Array} */
      this._disabledInputs = [];
      /** @type {boolean} */
      this._datepickerShowing = false;
      /** @type {boolean} */
      this._inDialog = false;
      /** @type {string} */
      this._mainDivId = "ui-datepicker-div";
      /** @type {string} */
      this._inlineClass = "ui-datepicker-inline";
      /** @type {string} */
      this._appendClass = "ui-datepicker-append";
      /** @type {string} */
      this._triggerClass = "ui-datepicker-trigger";
      /** @type {string} */
      this._dialogClass = "ui-datepicker-dialog";
      /** @type {string} */
      this._disableClass = "ui-datepicker-disabled";
      /** @type {string} */
      this._unselectableClass = "ui-datepicker-unselectable";
      /** @type {string} */
      this._currentClass = "ui-datepicker-current-day";
      /** @type {string} */
      this._dayOverClass = "ui-datepicker-days-cell-over";
      /** @type {!Array} */
      this.regional = [];
      this.regional[""] = {
         closeText: "Done",
         prevText: "Prev",
         nextText: "Next",
         currentText: "Today",
         monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
         monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
         dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
         dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
         dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
         weekHeader: "Wk",
         dateFormat: "mm/dd/yy",
         firstDay: 0,
         isRTL: false,
         showMonthAfterYear: false,
         yearSuffix: "",
         selectMonthLabel: "Select month",
         selectYearLabel: "Select year"
      };
      this._defaults = {
         showOn: "focus",
         showAnim: "fadeIn",
         showOptions: {},
         defaultDate: null,
         appendText: "",
         buttonText: "...",
         buttonImage: "",
         buttonImageOnly: false,
         hideIfNoPrevNext: false,
         navigationAsDateFormat: false,
         gotoCurrent: false,
         changeMonth: false,
         changeYear: false,
         yearRange: "c-10:c+10",
         showOtherMonths: false,
         selectOtherMonths: false,
         showWeek: false,
         calculateWeek: this.iso8601Week,
         shortYearCutoff: "+10",
         minDate: null,
         maxDate: null,
         duration: "fast",
         beforeShowDay: null,
         beforeShow: null,
         onSelect: null,
         onChangeMonthYear: null,
         onClose: null,
         onUpdateDatepicker: null,
         numberOfMonths: 1,
         showCurrentAtPos: 0,
         stepMonths: 1,
         stepBigMonths: 12,
         altField: "",
         altFormat: "",
         constrainInput: true,
         showButtonPanel: false,
         autoSize: false,
         disabled: false
      };
      $.extend(this._defaults, this.regional[""]);
      this.regional.en = $.extend(true, {}, this.regional[""]);
      this.regional["en-US"] = $.extend(true, {}, this.regional.en);
      this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
   }
   /**
    * @param {!Object} dpDiv
    * @return {?}
    */
   function datepicker_bindHover(dpDiv) {
      /** @type {string} */
      var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
      return dpDiv.on("mouseout", selector, function () {
         $(this).removeClass("ui-state-hover");
         if (-1 !== this.className.indexOf("ui-datepicker-prev")) {
            $(this).removeClass("ui-datepicker-prev-hover");
         }
         if (-1 !== this.className.indexOf("ui-datepicker-next")) {
            $(this).removeClass("ui-datepicker-next-hover");
         }
      }).on("mouseover", selector, datepicker_handleMouseover);
   }
   /**
    * @return {undefined}
    */
   function datepicker_handleMouseover() {
      if (!$.datepicker._isDisabledDatepicker((datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent() : datepicker_instActive.input)[0])) {
         $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
         $(this).addClass("ui-state-hover");
         if (-1 !== this.className.indexOf("ui-datepicker-prev")) {
            $(this).addClass("ui-datepicker-prev-hover");
         }
         if (-1 !== this.className.indexOf("ui-datepicker-next")) {
            $(this).addClass("ui-datepicker-next-hover");
         }
      }
   }
   /**
    * @param {!Object} obj
    * @param {!Object} target
    * @return {?}
    */
   function extendRemove(obj, target) {
      var prop;
      for (prop in $.extend(obj, target), target) {
         if (null == target[prop]) {
            obj[prop] = target[prop];
         }
      }
      // console.log('open'); //!!!!!!!!!!!
      return obj;
   }
   $.ui = $.ui || {};
   var datepicker_instActive;
   /** @type {string} */
   $.ui.version = "1.13.1";
   $.ui.keyCode = {
      BACKSPACE: 8,
      COMMA: 188,
      DELETE: 46,
      DOWN: 40,
      END: 35,
      ENTER: 13,
      ESCAPE: 27,
      HOME: 36,
      LEFT: 37,
      PAGE_DOWN: 34,
      PAGE_UP: 33,
      PERIOD: 190,
      RIGHT: 39,
      SPACE: 32,
      TAB: 9,
      UP: 38
   };
   $.extend($.ui, {
      datepicker: {
         version: "1.13.1"
      }
   });
   $.extend(Datepicker.prototype, {
      markerClassName: "hasDatepicker",
      maxRows: 4,
      _widgetDatepicker: function () {
         return this.dpDiv;
      },
      setDefaults: function (options) {
         return extendRemove(this._defaults, options || {}), this;
      },
      _attachDatepicker: function (target, settings) {
         var inst;
         var nodeName = target.nodeName.toLowerCase();
         /** @type {boolean} */
         var inline = "div" === nodeName || "span" === nodeName;
         if (!target.id) {
            this.uuid += 1;
            /** @type {string} */
            target.id = "dp" + this.uuid;
         }
         (inst = this._newInst($(target), inline)).settings = $.extend({}, settings || {});
         if ("input" === nodeName) {
            this._connectDatepicker(target, inst);
         } else {
            if (inline) {
               this._inlineDatepicker(target, inst);
            }
         }
      },
      _newInst: function (target, inline) {
         return {
            id: target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"),
            input: target,
            selectedDay: 0,
            selectedMonth: 0,
            selectedYear: 0,
            drawMonth: 0,
            drawYear: 0,
            inline: inline,
            dpDiv: inline ? datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
         };
      },
      _connectDatepicker: function (target, inst) {
         //   console.log(''); //!!!

         var input = $(target);
         inst.append = $([]);
         inst.trigger = $([]);
         if (!input.hasClass(this.markerClassName)) {
            this._attachments(input, inst);
            input.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp);
            this._autoSize(inst);
            $.data(target, "datepicker", inst);
            if (inst.settings.disabled) {
               this._disableDatepicker(target);
            }
         }
      },
      _attachments: function (input, inst) {
         var buttonImage;
         var buttonText = this._get(inst, "appendText");
         var isRTL = this._get(inst, "isRTL");
         if (inst.append) {
            inst.append.remove();
         }
         if (buttonText) {
            inst.append = $("<span>").addClass(this._appendClass).text(buttonText);
            input[isRTL ? "before" : "after"](inst.append);
         }
         input.off("focus", this._showDatepicker);
         if (inst.trigger) {
            inst.trigger.remove();
         }
         if (!("focus" !== (buttonImage = this._get(inst, "showOn")) && "both" !== buttonImage)) {
            input.on("focus", this._showDatepicker);
         }
         if (!("button" !== buttonImage && "both" !== buttonImage)) {
            buttonText = this._get(inst, "buttonText");
            buttonImage = this._get(inst, "buttonImage");
            if (this._get(inst, "buttonImageOnly")) {
               inst.trigger = $("<img>").addClass(this._triggerClass).attr({
                  src: buttonImage,
                  alt: buttonText,
                  title: buttonText
               });
            } else {
               inst.trigger = $("<button type='button'>").addClass(this._triggerClass);
               if (buttonImage) {
                  inst.trigger.html($("<img>").attr({
                     src: buttonImage,
                     alt: buttonText,
                     title: buttonText
                  }));
               } else {
                  inst.trigger.text(buttonText);
               }
            }
            input[isRTL ? "before" : "after"](inst.trigger);
            inst.trigger.on("click", function () {
               return $.datepicker._datepickerShowing && $.datepicker._lastInput === input[0] ? $.datepicker._hideDatepicker() : ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0] && $.datepicker._hideDatepicker(), $.datepicker._showDatepicker(input[0])), false;
            });
         }
      },
      _autoSize: function (inst) {
         var findMax;
         var l;
         var i;
         var j;
         var date;
         var dateFormat;
         if (this._get(inst, "autoSize") && !inst.inline) {
            /** @type {!Date} */
            date = new Date(2009, 11, 20);
            if ((dateFormat = this._get(inst, "dateFormat")).match(/[DM]/)) {
               /**
                * @param {!NodeList} names
                * @return {?}
                */
               findMax = function (names) {
                  /** @type {number} */
                  j = i = l = 0;
                  for (; j < names.length; j++) {
                     if (names[j].length > l) {
                        l = names[j].length;
                        /** @type {number} */
                        i = j;
                     }
                  }
                  return i;
               };
               date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
               date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
            }
            inst.input.attr("size", this._formatDate(inst, date).length);
         }
      },
      _inlineDatepicker: function (target, inst) {
         var divSpan = $(target);
         if (!divSpan.hasClass(this.markerClassName)) {
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, "datepicker", inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            if (inst.settings.disabled) {
               this._disableDatepicker(target);
            }
            inst.dpDiv.css("display", "block");
         }
      },
      _dialogDatepicker: function (input, date, onSelect, settings, pos) {
         var id;
         var inst = this._dialogInst;
         return inst || (this.uuid += 1, id = "dp" + this.uuid, this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.on("keydown", this._doKeyDown), $("body").append(this._dialogInput), (inst = this._dialogInst = this._newInst(this._dialogInput, false)).settings = {}, $.data(this._dialogInput[0], "datepicker", inst)), extendRemove(inst.settings, settings || {}), date = date && date.constructor === Date ? this._formatDate(inst,
            date) : date, this._dialogInput.val(date), this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null, this._pos || (id = document.documentElement.clientWidth, settings = document.documentElement.clientHeight, date = document.documentElement.scrollLeft || document.body.scrollLeft, pos = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [id / 2 - 100 + date, settings / 2 - 150 + pos]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] +
               "px"), inst.settings.onSelect = onSelect, this._inDialog = true, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), $.blockUI && $.blockUI(this.dpDiv), $.data(this._dialogInput[0], "datepicker", inst), this;
      },
      _destroyDatepicker: function (target) {
         var _;
         var $target = $(target);
         var inst = $.data(target, "datepicker");
         if ($target.hasClass(this.markerClassName)) {
            _ = target.nodeName.toLowerCase();
            $.removeData(target, "datepicker");
            if ("input" === _) {
               inst.append.remove();
               inst.trigger.remove();
               $target.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp);
            } else {
               if (!("div" !== _ && "span" !== _)) {
                  $target.removeClass(this.markerClassName).empty();
               }
            }
            if (datepicker_instActive === inst) {
               /** @type {null} */
               datepicker_instActive = null;
               /** @type {null} */
               this._curInst = null;
            }
         }
      },
      _enableDatepicker: function (target) {
         var name;
         var $target = $(target);
         var inst = $.data(target, "datepicker");
         if ($target.hasClass(this.markerClassName)) {
            if ("input" === (name = target.nodeName.toLowerCase())) {
               /** @type {boolean} */
               target.disabled = false;
               inst.trigger.filter("button").each(function () {
                  /** @type {boolean} */
                  this.disabled = false;
               }).end().filter("img").css({
                  opacity: "1.0",
                  cursor: ""
               });
            } else {
               if (!("div" !== name && "span" !== name)) {
                  ($target = $target.children("." + this._inlineClass)).children().removeClass("ui-state-disabled");
                  $target.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
               }
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
               return value === target ? null : value;
            });
         }
      },
      _disableDatepicker: function (target) {
         var name;
         var $target = $(target);
         var inst = $.data(target, "datepicker");
         if ($target.hasClass(this.markerClassName)) {
            if ("input" === (name = target.nodeName.toLowerCase())) {
               /** @type {boolean} */
               target.disabled = true;
               inst.trigger.filter("button").each(function () {
                  /** @type {boolean} */
                  this.disabled = true;
               }).end().filter("img").css({
                  opacity: "0.5",
                  cursor: "default"
               });
            } else {
               if (!("div" !== name && "span" !== name)) {
                  ($target = $target.children("." + this._inlineClass)).children().addClass("ui-state-disabled");
                  $target.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
               }
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
               return value === target ? null : value;
            });
            /** @type {!Element} */
            this._disabledInputs[this._disabledInputs.length] = target;
         }
      },
      _isDisabledDatepicker: function (target) {
         if (!target) {
            return false;
         }
         /** @type {number} */
         var i = 0;
         for (; i < this._disabledInputs.length; i++) {
            if (this._disabledInputs[i] === target) {
               return true;
            }
         }
         return false;
      },
      _getInst: function (target) {
         try {
            return $.data(target, "datepicker");
         } catch (e) {
            throw "Missing instance data for this datepicker";
         }
      },
      _optionDatepicker: function (target, name, value) {
         var settings;
         var date;
         var inst = this._getInst(target);
         if (2 === arguments.length && "string" == typeof name) {
            return "defaults" === name ? $.extend({}, $.datepicker._defaults) : inst ? "all" === name ? $.extend({}, inst.settings) : this._get(inst, name) : null;
         }
         settings = name || {};
         if ("string" == typeof name) {
            /** @type {!Object} */
            (settings = {})[name] = value;
         }
         if (inst) {
            if (this._curInst === inst) {
               this._hideDatepicker();
            }
            date = this._getDateDatepicker(target, true);
            name = this._getMinMaxDate(inst, "min");
            value = this._getMinMaxDate(inst, "max");
            extendRemove(inst.settings, settings);
            if (null !== name && void 0 !== settings.dateFormat && void 0 === settings.minDate) {
               inst.settings.minDate = this._formatDate(inst, name);
            }
            if (null !== value && void 0 !== settings.dateFormat && void 0 === settings.maxDate) {
               inst.settings.maxDate = this._formatDate(inst, value);
            }
            if ("disabled" in settings) {
               if (settings.disabled) {
                  this._disableDatepicker(target);
               } else {
                  this._enableDatepicker(target);
               }
            }
            this._attachments($(target), inst);
            this._autoSize(inst);
            this._setDate(inst, date);
            this._updateAlternate(inst);
            this._updateDatepicker(inst);
         }
      },
      _changeDatepicker: function (target, name, value) {
         this._optionDatepicker(target, name, value);
      },
      _refreshDatepicker: function (inst) {
         inst = this._getInst(inst);
         if (inst) {
            this._updateDatepicker(inst);
         }
      },
      _setDateDatepicker: function (inst, date) {
         inst = this._getInst(inst);
         if (inst) {
            this._setDate(inst, date);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
         }
      },
      _getDateDatepicker: function (inst, noDefault) {
         inst = this._getInst(inst);
         return inst && !inst.inline && this._setDateFromField(inst, noDefault), inst ? this._getDate(inst) : null;
      },
      _doKeyDown: function (event) {
         var onSelect;
         var dateStr;
         var inst = $.datepicker._getInst(event.target);
         /** @type {boolean} */
         var s = true;
         var isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
         if (inst._keyEvent = true, $.datepicker._datepickerShowing) {
            switch (event.keyCode) {
               case 9:
                  $.datepicker._hideDatepicker();
                  /** @type {boolean} */
                  s = false;
                  break;
               case 13:
                  return (dateStr = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv))[0] && $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, dateStr[0]), (onSelect = $.datepicker._get(inst, "onSelect")) ? (dateStr = $.datepicker._formatDate(inst), onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst])) : $.datepicker._hideDatepicker(), false;
               case 27:
                  $.datepicker._hideDatepicker();
                  break;
               case 33:
                  $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                  break;
               case 34:
                  $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                  break;
               case 35:
                  if (event.ctrlKey || event.metaKey) {
                     $.datepicker._clearDate(event.target);
                  }
                  s = event.ctrlKey || event.metaKey;
                  break;
               case 36:
                  if (event.ctrlKey || event.metaKey) {
                     $.datepicker._gotoToday(event.target);
                  }
                  s = event.ctrlKey || event.metaKey;
                  break;
               case 37:
                  if (event.ctrlKey || event.metaKey) {
                     $.datepicker._adjustDate(event.target, isRTL ? 1 : -1, "D");
                  }
                  s = event.ctrlKey || event.metaKey;
                  if (event.originalEvent.altKey) {
                     $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                  }
                  break;
               case 38:
                  if (event.ctrlKey || event.metaKey) {
                     $.datepicker._adjustDate(event.target, -7, "D");
                  }
                  s = event.ctrlKey || event.metaKey;
                  break;
               case 39:
                  if (event.ctrlKey || event.metaKey) {
                     $.datepicker._adjustDate(event.target, isRTL ? -1 : 1, "D");
                  }
                  s = event.ctrlKey || event.metaKey;
                  if (event.originalEvent.altKey) {
                     $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                  }
                  break;
               case 40:
                  if (event.ctrlKey || event.metaKey) {
                     $.datepicker._adjustDate(event.target, 7, "D");
                  }
                  s = event.ctrlKey || event.metaKey;
                  break;
               default:
                  /** @type {boolean} */
                  s = false;
            }
         } else {
            if (36 === event.keyCode && event.ctrlKey) {
               $.datepicker._showDatepicker(this);
            } else {
               /** @type {boolean} */
               s = false;
            }
         }
         if (s) {
            event.preventDefault();
            event.stopPropagation();
         }
      },
      _doKeyPress: function (event) {
         var instrumentByPatchID;
         var inst = $.datepicker._getInst(event.target);
         if ($.datepicker._get(inst, "constrainInput")) {
            return instrumentByPatchID = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat")), inst = String.fromCharCode(null == event.charCode ? event.keyCode : event.charCode), event.ctrlKey || event.metaKey || inst < " " || !instrumentByPatchID || -1 < instrumentByPatchID.indexOf(inst);
         }
      },
      _doKeyUp: function (inst) {
         inst = $.datepicker._getInst(inst.target);
         if (inst.input.val() !== inst.lastVal) {
            try {
               if ($.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst))) {
                  $.datepicker._setDateFromField(inst);
                  $.datepicker._updateAlternate(inst);
                  $.datepicker._updateDatepicker(inst);
               }
            } catch (e) {
            }
         }
         return true;
      },
      _showDatepicker: function (input) {
         var isFixed;
         var showAnim;
         var offset;
         var inst;
         if ("input" !== (input = input.target || input).nodeName.toLowerCase()) {
            input = $("input", input.parentNode)[0];
         }
         if (!($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input)) {
            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
               $.datepicker._curInst.dpDiv.stop(true, true);
               if (inst && $.datepicker._datepickerShowing) {
                  $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
               }
            }
            if (false !== (showAnim = (offset = $.datepicker._get(inst, "beforeShow")) ? offset.apply(input, [input, inst]) : {})) {
               extendRemove(inst.settings, showAnim);
               /** @type {null} */
               inst.lastVal = null;
               /** @type {!Object} */
               $.datepicker._lastInput = input;
               $.datepicker._setDateFromField(inst);
               if ($.datepicker._inDialog) {
                  /** @type {string} */
                  input.value = "";
               }
               if (!$.datepicker._pos) {
                  $.datepicker._pos = $.datepicker._findPos(input);
                  $.datepicker._pos[1] += input.offsetHeight;
               }
               /** @type {boolean} */
               isFixed = false;
               $(input).parents().each(function () {
                  return !(isFixed = isFixed | "fixed" === $(this).css("position"));
               });
               offset = {
                  left: $.datepicker._pos[0],
                  top: $.datepicker._pos[1]
               };
               /** @type {null} */
               $.datepicker._pos = null;
               inst.dpDiv.empty();
               inst.dpDiv.css({
                  position: "absolute",
                  display: "block",
                  top: "-1000px"
               });
               $.datepicker._updateDatepicker(inst);
               offset = $.datepicker._checkOffset(inst, offset, isFixed);
               inst.dpDiv.css({
                  position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
                  display: "none",
                  left: offset.left + "px",
                  top: offset.top + "px"
               });
               if (!inst.inline) {
                  showAnim = $.datepicker._get(inst, "showAnim");
                  offset = $.datepicker._get(inst, "duration");
                  inst.dpDiv.css("z-index", function (elem) {
                     var relative;
                     var unusedAttrsVerticalAutoCutoff;
                     for (; elem.length && elem[0] !== document;) {
                        if (("absolute" === (relative = elem.css("position")) || "relative" === relative || "fixed" === relative) && (unusedAttrsVerticalAutoCutoff = parseInt(elem.css("zIndex"), 10), !isNaN(unusedAttrsVerticalAutoCutoff) && 0 !== unusedAttrsVerticalAutoCutoff)) {
                           return unusedAttrsVerticalAutoCutoff;
                        }
                        elem = elem.parent();
                     }
                     return 0;
                  }($(input)) + 1);
                  /** @type {boolean} */
                  $.datepicker._datepickerShowing = true;
                  if ($.effects && $.effects.effect[showAnim]) {
                     inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), offset);
                  } else {
                     inst.dpDiv[showAnim || "show"](showAnim ? offset : null);
                  }
                  if ($.datepicker._shouldFocusInput(inst)) {
                     inst.input.trigger("focus");
                  }
                  $.datepicker._curInst = inst;
               }
            }
         }
      },
      _updateDatepicker: function (inst) {
         /** @type {number} */
         this.maxRows = 4;
         (datepicker_instActive = inst).dpDiv.empty().append(this._generateHTML(inst));
         this._attachHandlers(inst);
         var origyearshtml;
         var numMonths = this._getNumberOfMonths(inst);
         var cols = numMonths[1];
         var s = inst.dpDiv.find("." + this._dayOverClass + " a");
         var onClose = $.datepicker._get(inst, "onUpdateDatepicker");
         if (0 < s.length) {
            datepicker_handleMouseover.apply(s.get(0));
         }
         inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
         if (1 < cols) {
            inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", 17 * cols + "em");
         }
         inst.dpDiv[(1 !== numMonths[0] || 1 !== numMonths[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi");
         inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
         if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
            inst.input.trigger("focus");
         }
         if (inst.yearshtml) {
            origyearshtml = inst.yearshtml;
            setTimeout(function () {
               if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                  inst.dpDiv.find("select.ui-datepicker-year").first().replaceWith(inst.yearshtml);
               }
               /** @type {null} */
               origyearshtml = inst.yearshtml = null;
            }, 0);
         }
         if (onClose) {
            onClose.apply(inst.input ? inst.input[0] : null, [inst]);
         }
      },
      _shouldFocusInput: function (inst) {
         return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
      },
      _checkOffset: function (inst, offset, isFixed) {
         var dpWidth = inst.dpDiv.outerWidth();
         var dpHeight = inst.dpDiv.outerHeight();
         var inputWidth = inst.input ? inst.input.outerWidth() : 0;
         var inputHeight = inst.input ? inst.input.outerHeight() : 0;
         var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());
         var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
         return offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0, offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0, offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0, offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && dpWidth < viewWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0), offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight &&
            dpHeight < viewHeight ? Math.abs(dpHeight + inputHeight) : 0), offset;
      },
      _findPos: function (obj) {
         var inst = this._getInst(obj);
         var isRTL = this._get(inst, "isRTL");
         for (; obj && ("hidden" === obj.type || 1 !== obj.nodeType || $.expr.pseudos.hidden(obj));) {
            obj = obj[isRTL ? "previousSibling" : "nextSibling"];
         }
         return [(inst = $(obj).offset()).left, inst.top];
      },
      _hideDatepicker: function (input) {
         var showAnim;
         var duration;
         var inst = this._curInst;
         if (!(!inst || input && inst !== $.data(input, "datepicker"))) {
            if (this._datepickerShowing) {
               showAnim = this._get(inst, "showAnim");
               duration = this._get(inst, "duration");
               /**
                * @return {undefined}
                */
               input = function () {
                  $.datepicker._tidyDialog(inst);
               };
               if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                  inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, input);
               } else {
                  inst.dpDiv["slideDown" === showAnim ? "slideUp" : "fadeIn" === showAnim ? "fadeOut" : "hide"](showAnim ? duration : null, input);
               }
               if (!showAnim) {
                  input();
               }
               /** @type {boolean} */
               this._datepickerShowing = false;
               if (input = this._get(inst, "onClose")) {
                  input.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : "", inst]);
               }
               /** @type {null} */
               this._lastInput = null;
               if (this._inDialog) {
                  this._dialogInput.css({
                     position: "absolute",
                     left: "0",
                     top: "-100px"
                  });
                  if ($.blockUI) {
                     $.unblockUI();
                     $("body").append(this.dpDiv);
                  }
               }
               /** @type {boolean} */
               this._inDialog = false;
            }
         }
      },
      _tidyDialog: function (inst) {
         inst.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");
      },
      _checkExternalClick: function (event) {
         var $target;
         if ($.datepicker._curInst) {
            $target = $(event.target);
            event = $.datepicker._getInst($target[0]);
            if (!(($target[0].id === $.datepicker._mainDivId || 0 !== $target.parents("#" + $.datepicker._mainDivId).length || $target.hasClass($.datepicker.markerClassName) || $target.closest("." + $.datepicker._triggerClass).length || !$.datepicker._datepickerShowing || $.datepicker._inDialog && $.blockUI) && (!$target.hasClass($.datepicker.markerClassName) || $.datepicker._curInst === event))) {
               $.datepicker._hideDatepicker();
            }
         }
      },
      _adjustDate: function (root, offset, period) {
         var target = $(root);
         root = this._getInst(target[0]);
         if (!this._isDisabledDatepicker(target[0])) {
            this._adjustInstDate(root, offset, period);
            this._updateDatepicker(root);
         }
      },
      _gotoToday: function (e) {
         var target = $(e);
         var inst = this._getInst(target[0]);
         if (this._get(inst, "gotoCurrent") && inst.currentDay) {
            inst.selectedDay = inst.currentDay;
            inst.drawMonth = inst.selectedMonth = inst.currentMonth;
            inst.drawYear = inst.selectedYear = inst.currentYear;
         } else {
            /** @type {!Date} */
            e = new Date;
            /** @type {number} */
            inst.selectedDay = e.getDate();
            /** @type {number} */
            inst.drawMonth = inst.selectedMonth = e.getMonth();
            /** @type {number} */
            inst.drawYear = inst.selectedYear = e.getFullYear();
         }
         this._notifyChange(inst);
         this._adjustDate(target);
      },
      _selectMonthYear: function (inst, select, period) {
         var target = $(inst);
         inst = this._getInst(target[0]);
         /** @type {number} */
         inst["selected" + ("M" === period ? "Month" : "Year")] = inst["draw" + ("M" === period ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
         this._notifyChange(inst);
         this._adjustDate(target);
      },
      _selectDay: function (id, month, year, td) {
         var inst = $(id);
         if (!($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(inst[0]))) {
            /** @type {number} */
            (inst = this._getInst(inst[0])).selectedDay = inst.currentDay = parseInt($("a", td).attr("data-date"));
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
         }
      },
      _clearDate: function (inst) {
         inst = $(inst);
         this._selectDate(inst, "");
      },
      _selectDate: function (inst, dateStr) {
         var onSelect = $(inst);
         inst = this._getInst(onSelect[0]);
         dateStr = null != dateStr ? dateStr : this._formatDate(inst);
         if (inst.input) {
            inst.input.val(dateStr);
         }
         this._updateAlternate(inst);
         if (onSelect = this._get(inst, "onSelect")) {
            onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);
         } else {
            if (inst.input) {
               inst.input.trigger("change");
            }
         }
         if (inst.inline) {
            this._updateDatepicker(inst);
         } else {
            this._hideDatepicker();
            this._lastInput = inst.input[0];
            if ("object" != typeof inst.input[0]) {
               inst.input.trigger("focus");
            }
            /** @type {null} */
            this._lastInput = null;
         }
      },
      _updateAlternate: function (inst) {
         var altFormat;
         var date;
         var altField = this._get(inst, "altField");
         if (altField) {
            altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
            date = this._getDate(inst);
            inst = this.formatDate(altFormat, date, this._getFormatConfig(inst));
            $(document).find(altField).val(inst);
         }
      },
      noWeekends: function (date) {
         date = date.getDay();
         return [0 < date && date < 6, ""];
      },
      iso8601Week: function (date) {
         /** @type {!Date} */
         var d = new Date(date.getTime());
         return d.setDate(d.getDate() + 4 - (d.getDay() || 7)), date = d.getTime(), d.setMonth(0), d.setDate(1), Math.floor(Math.round((date - d) / 864E5) / 7) + 1;
      },
      parseDate: function (format, value, settings) {
         if (null == format || null == value) {
            throw "Invalid arguments";
         }
         if ("" === (value = "object" == typeof value ? value.toString() : value + "")) {
            return null;
         }
         var dim;
         var extra;
         var date;
         /** @type {number} */
         var iValue = 0;
         var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
         shortYearCutoff = "string" != typeof shortYearCutoff ? shortYearCutoff : (new Date).getFullYear() % 100 + parseInt(shortYearCutoff, 10);
         var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
         var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
         var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
         var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
         /** @type {number} */
         var year = -1;
         /** @type {number} */
         var month = -1;
         /** @type {number} */
         var day = -1;
         /** @type {number} */
         var doy = -1;
         /** @type {boolean} */
         var f = false;
         /**
          * @param {string} match
          * @return {?}
          */
         var lookAhead = function (match) {
            /** @type {boolean} */
            match = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
            return match && iFormat++, match;
         };
         /**
          * @param {string} match
          * @return {?}
          */
         var getNumber = function (match) {
            var args = lookAhead(match);
            /** @type {number} */
            args = "@" === match ? 14 : "!" === match ? 20 : "y" === match && args ? 4 : "o" === match ? 3 : 2;
            /** @type {!RegExp} */
            args = new RegExp("^\\d{" + ("y" === match ? args : 1) + "," + args + "}");
            args = value.substring(iValue).match(args);
            if (!args) {
               throw "Missing number at position " + iValue;
            }
            return iValue = iValue + args[0].length, parseInt(args[0], 10);
         };
         /**
          * @param {string} match
          * @param {number} shortNames
          * @param {number} longNames
          * @return {?}
          */
         var getName = function (match, shortNames, longNames) {
            /** @type {number} */
            var filter_error = -1;
            shortNames = $.map(lookAhead(match) ? longNames : shortNames, function (canCreateDiscussions, isSlidingUp) {
               return [[isSlidingUp, canCreateDiscussions]];
            }).sort(function (sortedValueArrays, clipperPoly) {
               return -(sortedValueArrays[1].length - clipperPoly[1].length);
            });
            if ($.each(shortNames, function (canCreateDiscussions, data) {
               var name = data[1];
               if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                  return filter_error = data[0], iValue = iValue + name.length, false;
               }
            }), -1 !== filter_error) {
               return filter_error + 1;
            }
            throw "Unknown name at position " + iValue;
         };
         /**
          * @return {undefined}
          */
         var checkLiteral = function () {
            if (value.charAt(iValue) !== format.charAt(iFormat)) {
               throw "Unexpected literal at position " + iValue;
            }
            iValue++;
         };
         /** @type {number} */
         var iFormat = 0;
         for (; iFormat < format.length; iFormat++) {
            if (f) {
               if ("'" !== format.charAt(iFormat) || lookAhead("'")) {
                  checkLiteral();
               } else {
                  /** @type {boolean} */
                  f = false;
               }
            } else {
               switch (format.charAt(iFormat)) {
                  case "d":
                     day = getNumber("d");
                     break;
                  case "D":
                     getName("D", dayNamesShort, dayNames);
                     break;
                  case "o":
                     doy = getNumber("o");
                     break;
                  case "m":
                     month = getNumber("m");
                     break;
                  case "M":
                     month = getName("M", monthNamesShort, monthNames);
                     break;
                  case "y":
                     year = getNumber("y");
                     break;
                  case "@":
                     /** @type {number} */
                     year = (date = new Date(getNumber("@"))).getFullYear();
                     /** @type {number} */
                     month = date.getMonth() + 1;
                     /** @type {number} */
                     day = date.getDate();
                     break;
                  case "!":
                     /** @type {number} */
                     year = (date = new Date((getNumber("!") - this._ticksTo1970) / 1E4)).getFullYear();
                     /** @type {number} */
                     month = date.getMonth() + 1;
                     /** @type {number} */
                     day = date.getDate();
                     break;
                  case "'":
                     if (lookAhead("'")) {
                        checkLiteral();
                     } else {
                        /** @type {boolean} */
                        f = true;
                     }
                     break;
                  default:
                     checkLiteral();
               }
            }
         }
         if (iValue < value.length && (extra = value.substr(iValue), !/^\s+/.test(extra))) {
            throw "Extra/unparsed characters found in date: " + extra;
         }
         if (-1 === year ? year = (new Date).getFullYear() : year < 100 && (year = year + ((new Date).getFullYear() - (new Date).getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100))), -1 < doy) {
            /** @type {number} */
            month = 1;
            day = doy;
            for (; ;) {
               if (day <= (dim = this._getDaysInMonth(year, month - 1))) {
                  break;
               }
               month++;
               /** @type {number} */
               day = day - dim;
            }
         }
         if ((date = this._daylightSavingAdjust(new Date(year, month - 1, day))).getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
            throw "Invalid date";
         }
         return date;
      },
      ATOM: "yy-mm-dd",
      COOKIE: "D, dd M yy",
      ISO_8601: "yy-mm-dd",
      RFC_822: "D, d M y",
      RFC_850: "DD, dd-M-y",
      RFC_1036: "D, d M y",
      RFC_1123: "D, d M yy",
      RFC_2822: "D, d M yy",
      RSS: "D, d M y",
      TICKS: "!",
      TIMESTAMP: "@",
      W3C: "yy-mm-dd",
      _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1E7,
      formatDate: function (format, date, settings) {
         /**
          * @param {string} m
          * @param {number} val
          * @param {number} len
          * @return {?}
          */
         function f1(m, val, len) {
            /** @type {string} */
            var n = "" + val;
            if (look(m)) {
               for (; n.length < len;) {
                  /** @type {string} */
                  n = "0" + n;
               }
            }
            return n;
         }
         /**
          * @param {string} m
          * @param {?} p
          * @param {string} a
          * @param {string} name
          * @return {?}
          */
         function f2(m, p, a, name) {
            return (look(m) ? name : a)[p];
         }
         if (!date) {
            return "";
         }
         var iFormat;
         var byte3 = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
         var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
         var values = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
         var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
         /**
          * @param {string} m
          * @return {?}
          */
         var look = function (m) {
            /** @type {boolean} */
            m = iFormat + 1 < format.length && format.charAt(iFormat + 1) === m;
            return m && iFormat++, m;
         };
         /** @type {string} */
         var output = "";
         /** @type {boolean} */
         var u = false;
         if (date) {
            /** @type {number} */
            iFormat = 0;
            for (; iFormat < format.length; iFormat++) {
               if (u) {
                  if ("'" !== format.charAt(iFormat) || look("'")) {
                     output = output + format.charAt(iFormat);
                  } else {
                     /** @type {boolean} */
                     u = false;
                  }
               } else {
                  switch (format.charAt(iFormat)) {
                     case "d":
                        output = output + f1("d", date.getDate(), 2);
                        break;
                     case "D":
                        output = output + f2("D", date.getDay(), byte3, dayNames);
                        break;
                     case "o":
                        output = output + f1("o", Math.round(((new Date(date.getFullYear(), date.getMonth(), date.getDate())).getTime() - (new Date(date.getFullYear(), 0, 0)).getTime()) / 864E5), 3);
                        break;
                     case "m":
                        output = output + f1("m", date.getMonth() + 1, 2);
                        break;
                     case "M":
                        output = output + f2("M", date.getMonth(), values, monthNames);
                        break;
                     case "y":
                        output = output + (look("y") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100);
                        break;
                     case "@":
                        output = output + date.getTime();
                        break;
                     case "!":
                        output = output + (1E4 * date.getTime() + this._ticksTo1970);
                        break;
                     case "'":
                        if (look("'")) {
                           /** @type {string} */
                           output = output + "'";
                        } else {
                           /** @type {boolean} */
                           u = true;
                        }
                        break;
                     default:
                        output = output + format.charAt(iFormat);
                  }
               }
            }
         }
         return output;
      },
      _possibleChars: function (format) {
         /** @type {string} */
         var chars = "";
         /** @type {boolean} */
         var a = false;
         /**
          * @param {string} n
          * @return {?}
          */
         var lookAhead = function (n) {
            /** @type {boolean} */
            n = iFormat + 1 < format.length && format.charAt(iFormat + 1) === n;
            return n && iFormat++, n;
         };
         /** @type {number} */
         var iFormat = 0;
         for (; iFormat < format.length; iFormat++) {
            if (a) {
               if ("'" !== format.charAt(iFormat) || lookAhead("'")) {
                  chars = chars + format.charAt(iFormat);
               } else {
                  /** @type {boolean} */
                  a = false;
               }
            } else {
               switch (format.charAt(iFormat)) {
                  case "d":
                  case "m":
                  case "y":
                  case "@":
                     /** @type {string} */
                     chars = chars + "0123456789";
                     break;
                  case "D":
                  case "M":
                     return null;
                  case "'":
                     if (lookAhead("'")) {
                        /** @type {string} */
                        chars = chars + "'";
                     } else {
                        /** @type {boolean} */
                        a = true;
                     }
                     break;
                  default:
                     chars = chars + format.charAt(iFormat);
               }
            }
         }
         return chars;
      },
      _get: function (data, name) {
         return (void 0 !== data.settings[name] ? data.settings : this._defaults)[name];
      },
      _setDateFromField: function (inst, noDefault) {
         if (inst.input.val() !== inst.lastVal) {
            var dateFormat = this._get(inst, "dateFormat");
            var dates = inst.lastVal = inst.input ? inst.input.val() : null;
            var defaultDate = this._getDefaultDate(inst);
            var date = defaultDate;
            var settings = this._getFormatConfig(inst);
            try {
               date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (e) {
               dates = noDefault ? "" : dates;
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = dates ? date.getDate() : 0;
            inst.currentMonth = dates ? date.getMonth() : 0;
            inst.currentYear = dates ? date.getFullYear() : 0;
            this._adjustInstDate(inst);
         }
         console.log(inst);

         /*  console.log(inst.drawMonth + '---test'); */ //!!!!!!!!
         /*  console.log('setDateFromField'); */ //!!!!!!!!!

      },
      _getDefaultDate: function (inst) {
         return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date));
      },
      _determineDate: function (inst, data, val) {
         var index;
         var date;
         data = null == data || "" === data ? val : "string" == typeof data ? function (val) {
            try {
               return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), val, $.datepicker._getFormatConfig(inst));
            } catch (e) {
            }
            var dTempDate1 = (val.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date;
            var year = dTempDate1.getFullYear();
            var month = dTempDate1.getMonth();
            var index = dTempDate1.getDate();
            /** @type {!RegExp} */
            var regEvalVal = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
            /** @type {(Array<string>|null)} */
            var matches = regEvalVal.exec(val);
            for (; matches;) {
               switch (matches[2] || "d") {
                  case "d":
                  case "D":
                     index = index + parseInt(matches[1], 10);
                     break;
                  case "w":
                  case "W":
                     index = index + 7 * parseInt(matches[1], 10);
                     break;
                  case "m":
                  case "M":
                     month = month + parseInt(matches[1], 10);
                     /** @type {number} */
                     index = Math.min(index, $.datepicker._getDaysInMonth(year, month));
                     break;
                  case "y":
                  case "Y":
                     year = year + parseInt(matches[1], 10);
                     /** @type {number} */
                     index = Math.min(index, $.datepicker._getDaysInMonth(year, month));
               }
               /** @type {(Array<string>|null)} */
               matches = regEvalVal.exec(val);
            }
            return new Date(year, month, index);
         }(data) : "number" == typeof data ? isNaN(data) ? val : (index = data, (date = new Date).setDate(date.getDate() + index), date) : new Date(data.getTime());
         return (data = data && "Invalid Date" === data.toString() ? val : data) && (data.setHours(0), data.setMinutes(0), data.setSeconds(0), data.setMilliseconds(0)), this._daylightSavingAdjust(data);
      },
      _daylightSavingAdjust: function (date) {
         return date ? (date.setHours(12 < date.getHours() ? date.getHours() + 2 : 0), date) : null;
      },
      _setDate: function (inst, date, noChange) {
         /** @type {boolean} */
         var clear = !date;
         var drawYear = inst.selectedMonth;
         var drawMonth = inst.selectedYear;
         date = this._restrictMinMax(inst, this._determineDate(inst, date, new Date));
         inst.selectedDay = inst.currentDay = date.getDate();
         inst.drawMonth = inst.selectedMonth = inst.currentMonth = date.getMonth();
         inst.drawYear = inst.selectedYear = inst.currentYear = date.getFullYear();
         if (!(drawYear === inst.selectedMonth && drawMonth === inst.selectedYear || noChange)) {
            this._notifyChange(inst);
         }
         this._adjustInstDate(inst);
         if (inst.input) {
            inst.input.val(clear ? "" : this._formatDate(inst));
         }
      },
      _getDate: function (inst) {
         return !inst.currentYear || inst.input && "" === inst.input.val() ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
      },
      _attachHandlers: function (inst) {
         var stepMonths = this._get(inst, "stepMonths");
         var id = "#" + inst.id.replace(/\\\\/g, "\\");
         inst.dpDiv.find("[data-handler]").map(function () {
            var handler = {
               prev: function () {
                  $.datepicker._adjustDate(id, -stepMonths, "M");
               },
               next: function () {
                  $.datepicker._adjustDate(id, +stepMonths, "M");
               },
               hide: function () {
                  $.datepicker._hideDatepicker();
               },
               today: function () {
                  $.datepicker._gotoToday(id);
               },
               selectDay: function () {
                  return $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), false;
               },
               selectMonth: function () {
                  return $.datepicker._selectMonthYear(id, this, "M"), false;
               },
               selectYear: function () {
                  return $.datepicker._selectMonthYear(id, this, "Y"), false;
               }
            };
            $(this).on(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
         });
      },
      _generateHTML: function (inst) {
         var maxDraw;
         var clear;
         var prev;
         var firstDay;
         var showWeek;
         var dayNames;
         var dayNamesMin;
         var monthNames;
         var monthNamesShort;
         var beforeShowDay;
         var showOtherMonths;
         var selectOtherMonths;
         var defaultDate;
         var result;
         var dow;
         var row;
         var valueString;
         var col;
         var date;
         var val;
         var calender;
         var thead;
         var i;
         var leadDays;
         var daysInMonth;
         var numRows;
         var printDate;
         var dRow;
         var sigDescription;
         var daySettings;
         var otherMonth;
         var unselectable;
         /** @type {!Date} */
         var key = new Date;
         var selectedDate = this._daylightSavingAdjust(new Date(key.getFullYear(), key.getMonth(), key.getDate()));
         var isRTL = this._get(inst, "isRTL");
         var showButtonPanel = this._get(inst, "showButtonPanel");
         var hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext");
         var html = this._get(inst, "navigationAsDateFormat");
         var numMonths = this._getNumberOfMonths(inst);
         var value = this._get(inst, "showCurrentAtPos");
         key = this._get(inst, "stepMonths");
         /** @type {boolean} */
         var enable_keys = 1 !== numMonths[0] || 1 !== numMonths[1];
         var currentDate = this._daylightSavingAdjust(inst.currentDay ? new Date(inst.currentYear, inst.currentMonth, inst.currentDay) : new Date(9999, 9, 9));
         var minDate = this._getMinMaxDate(inst, "min");
         var maxDate = this._getMinMaxDate(inst, "max");
         /** @type {number} */
         var drawMonth = inst.drawMonth - value;
         /*  console.log(drawMonth);  *///!!!!

         var drawYear = inst.drawYear;
         if (drawMonth < 0 && (drawMonth = drawMonth + 12, drawYear--), maxDate) {
            maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
            maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
            for (; this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw;) {
               if (--drawMonth < 0) {
                  /** @type {number} */
                  drawMonth = 11;
                  drawYear--;
               }
            }
         }
         /** @type {number} */
         inst.drawMonth = drawMonth;
         inst.drawYear = drawYear;

         value = this._get(inst, "prevText");
         value = html ? this.formatDate(value, this._daylightSavingAdjust(new Date(drawYear, drawMonth - key, 1)), this._getFormatConfig(inst)) : value;
         clear = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? $("<a>").attr({
            class: "ui-datepicker-prev ui-corner-all",
            "data-handler": "prev",
            "data-event": "click",
            title: value
         }).append($("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w")).text(value))[0].outerHTML : hideIfNoPrevNext ? "" : $("<a>").attr({
            class: "ui-datepicker-prev ui-corner-all ui-state-disabled",
            title: value
         }).append($("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w")).text(value))[0].outerHTML;
         value = this._get(inst, "nextText");
         value = html ? this.formatDate(value, this._daylightSavingAdjust(new Date(drawYear, drawMonth + key, 1)), this._getFormatConfig(inst)) : value;
         prev = this._canAdjustMonth(inst, 1, drawYear, drawMonth) ? $("<a>").attr({
            class: "ui-datepicker-next ui-corner-all",
            "data-handler": "next",
            "data-event": "click",
            title: value
         }).append($("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e")).text(value))[0].outerHTML : hideIfNoPrevNext ? "" : $("<a>").attr({
            class: "ui-datepicker-next ui-corner-all ui-state-disabled",
            title: value
         }).append($("<span>").attr("class", "ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e")).text(value))[0].outerHTML;
         key = this._get(inst, "currentText");
         hideIfNoPrevNext = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : selectedDate;
         key = html ? this.formatDate(key, hideIfNoPrevNext, this._getFormatConfig(inst)) : key;
         /** @type {string} */
         value = "";
         if (!inst.inline) {
            value = $("<button>").attr({
               type: "button",
               class: "ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all",
               "data-handler": "hide",
               "data-event": "click"
            }).text(this._get(inst, "closeText"))[0].outerHTML;
         }
         /** @type {string} */
         html = "";
         if (showButtonPanel) {
            html = $("<div class='ui-datepicker-buttonpane ui-widget-content'>").append(isRTL ? value : "").append(this._isInRange(inst, hideIfNoPrevNext) ? $("<button>").attr({
               type: "button",
               class: "ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all",
               "data-handler": "today",
               "data-event": "click"
            }).text(key) : "").append(isRTL ? "" : value)[0].outerHTML;
         }
         /** @type {number} */
         firstDay = parseInt(this._get(inst, "firstDay"), 10);
         /** @type {number} */
         firstDay = isNaN(firstDay) ? 0 : firstDay;
         showWeek = this._get(inst, "showWeek");
         dayNames = this._get(inst, "dayNames");
         dayNamesMin = this._get(inst, "dayNamesMin");
         monthNames = this._get(inst, "monthNames");
         monthNamesShort = this._get(inst, "monthNamesShort");
         beforeShowDay = this._get(inst, "beforeShowDay");
         showOtherMonths = this._get(inst, "showOtherMonths");
         selectOtherMonths = this._get(inst, "selectOtherMonths");
         defaultDate = this._getDefaultDate(inst);
         /** @type {string} */
         result = "";
         /** @type {number} */
         row = 0;
         for (; row < numMonths[0]; row++) {
            /** @type {string} */
            valueString = "";
            /** @type {number} */
            this.maxRows = 4;
            /** @type {number} */
            col = 0;
            for (; col < numMonths[1]; col++) {
               if (date = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay)), val = " ui-corner-all", calender = "", enable_keys) {
                  if (calender = calender + "<div class='ui-datepicker-group", 1 < numMonths[1]) {
                     switch (col) {
                        case 0:
                           /** @type {string} */
                           calender = calender + " ui-datepicker-group-first";
                           /** @type {string} */
                           val = " ui-corner-" + (isRTL ? "right" : "left");
                           break;
                        case numMonths[1] - 1:
                           /** @type {string} */
                           calender = calender + " ui-datepicker-group-last";
                           /** @type {string} */
                           val = " ui-corner-" + (isRTL ? "left" : "right");
                           break;
                        default:
                           /** @type {string} */
                           calender = calender + " ui-datepicker-group-middle";
                           /** @type {string} */
                           val = "";
                     }
                  }
                  /** @type {string} */
                  calender = calender + "'>";
               }
               /** @type {string} */
               calender = calender + ("<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + val + "'>" + (/all|left/.test(val) && 0 === row ? isRTL ? prev : clear : "") + (/all|right/.test(val) && 0 === row ? isRTL ? clear : prev : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, 0 < row || 0 < col, monthNames, monthNamesShort) + "</div><table class='ui-datepicker-calendar'><thead><tr>");
               /** @type {string} */
               thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
               /** @type {number} */
               dow = 0;
               for (; dow < 7; dow++) {
                  /** @type {string} */
                  thead = thead + ("<th scope='col'" + (5 <= (dow + firstDay + 6) % 7 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + dayNames[i = (dow + firstDay) % 7] + "'>" + dayNamesMin[i] + "</span></th>");
               }
               /** @type {string} */
               calender = calender + (thead + "</tr></thead><tbody>");
               daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
               if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                  /** @type {number} */
                  inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
               }
               /** @type {number} */
               leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
               /** @type {number} */
               daysInMonth = Math.ceil((leadDays + daysInMonth) / 7);
               /** @type {number} */
               numRows = enable_keys && this.maxRows > daysInMonth ? this.maxRows : daysInMonth;
               /** @type {number} */
               this.maxRows = numRows;
               printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
               /** @type {number} */
               dRow = 0;
               for (; dRow < numRows; dRow++) {
                  /** @type {string} */
                  calender = calender + "<tr>";
                  /** @type {string} */
                  sigDescription = showWeek ? "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>" : "";
                  /** @type {number} */
                  dow = 0;
                  for (; dow < 7; dow++) {
                     daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ""];
                     unselectable = (otherMonth = printDate.getMonth() !== drawMonth) && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && maxDate < printDate;
                     /** @type {string} */
                     sigDescription = sigDescription + ("<td class='" + (5 <= (dow + firstDay + 6) % 7 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + (printDate.getTime() === date.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === date.getTime() ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ?
                        "" : " " + daySettings[1] + (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() === selectedDate.getTime() ? " ui-datepicker-today" : "")) + "'" + (otherMonth && !showOtherMonths || !daySettings[2] ? "" : " title='" + daySettings[2].replace(/'/g, "&#39;") + "'") + (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (otherMonth &&
                           !showOtherMonths ? "&#xa0;" : unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === selectedDate.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + "' href='#' aria-current='" + (printDate.getTime() === currentDate.getTime() ? "true" : "false") + "' data-date='" + printDate.getDate() +
                              "'>" + printDate.getDate() + "</a>") + "</td>");
                     printDate.setDate(printDate.getDate() + 1);
                     printDate = this._daylightSavingAdjust(printDate);
                  }
                  /** @type {string} */
                  calender = calender + (sigDescription + "</tr>");
               }
               if (11 < ++drawMonth) {
                  /** @type {number} */
                  drawMonth = 0;
                  drawYear++;
               }
               /** @type {string} */
               valueString = valueString + (calender = calender + ("</tbody></table>" + (enable_keys ? "</div>" + (0 < numMonths[0] && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "")));
            }
            /** @type {string} */
            result = result + valueString;
         }
         return result = result + html, inst._keyEvent = false, result;
      },
      _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
         var inMinYear;
         var inMaxYear;
         var month;
         var result;
         var year;
         var endYear;
         var changeMonth = this._get(inst, "changeMonth");
         var changeYear = this._get(inst, "changeYear");
         var showMonthAfterYear = this._get(inst, "showMonthAfterYear");
         var determineYear = this._get(inst, "selectMonthLabel");
         var showNowButton = this._get(inst, "selectYearLabel");
         /** @type {string} */
         var html = "<div class='ui-datepicker-title'>";
         /** @type {string} */
         var key = "";
         if (secondary || !changeMonth) {
            /** @type {string} */
            key = key + ("<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>");
         } else {
            inMinYear = minDate && minDate.getFullYear() === drawYear;
            inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
            /** @type {string} */
            key = key + ("<select class='ui-datepicker-month' aria-label='" + determineYear + "' data-handler='selectMonth' data-event='change'>");
            /** @type {number} */
            month = 0;
            for (; month < 12; month++) {
               if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                  /** @type {string} */
                  key = key + ("<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>");
               }
            }
            /** @type {string} */
            key = key + "</select>";
         }
         if (showMonthAfterYear || (html = html + (key + (!secondary && changeMonth && changeYear ? "" : "&#xa0;"))), !inst.yearshtml) {
            if (inst.yearshtml = "", secondary || !changeYear) {
               /** @type {string} */
               html = html + ("<span class='ui-datepicker-year'>" + drawYear + "</span>");
            } else {
               monthNames = this._get(inst, "yearRange").split(":");
               /** @type {number} */
               result = (new Date).getFullYear();
               year = (determineYear = function (value) {
                  value = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? result + parseInt(value, 10) : parseInt(value, 10);
                  return isNaN(value) ? result : value;
               })(monthNames[0]);
               /** @type {number} */
               endYear = Math.max(year, determineYear(monthNames[1] || ""));
               year = minDate ? Math.max(year, minDate.getFullYear()) : year;
               /** @type {number} */
               endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
               inst.yearshtml += "<select class='ui-datepicker-year' aria-label='" + showNowButton + "' data-handler='selectYear' data-event='change'>";
               for (; year <= endYear; year++) {
                  inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
               }
               inst.yearshtml += "</select>";
               /** @type {string} */
               html = html + inst.yearshtml;
               /** @type {null} */
               inst.yearshtml = null;
            }
         }
         return html = html + this._get(inst, "yearSuffix"), showMonthAfterYear && (html = html + ((!secondary && changeMonth && changeYear ? "" : "&#xa0;") + key)), html = html + "</div>";
      },
      _adjustInstDate: function (inst, date, undefined) {
         var year = inst.selectedYear + ("Y" === undefined ? date : 0);
         var month = inst.selectedMonth + ("M" === undefined ? date : 0);

         date = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + ("D" === undefined ? date : 0);
         date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, date)));
         inst.selectedDay = date.getDate();
         inst.drawMonth = inst.selectedMonth = date.getMonth();
         inst.drawYear = inst.selectedYear = date.getFullYear();
         if (!("M" !== undefined && "Y" !== undefined)) {
            this._notifyChange(inst);
         }
      },
      _restrictMinMax: function (inst, date) {
         var minDate = this._getMinMaxDate(inst, "min");
         inst = this._getMinMaxDate(inst, "max");
         date = minDate && date < minDate ? minDate : date;
         return inst && inst < date ? inst : date;
      },
      _notifyChange: function (inst) {
         var onChange = this._get(inst, "onChangeMonthYear");

         if (onChange) {
            onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);
         }
      },
      _getNumberOfMonths: function (o) {

         o = this._get(o, "numberOfMonths");
         return null == o ? [1, 1] : "number" == typeof o ? [1, o] : o;
      },
      _getMinMaxDate: function (inst, minMax) {
         return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
      },
      _getDaysInMonth: function (year, month) {
         return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
      },
      _getFirstDayOfMonth: function (year, month) {
         return (new Date(year, month, 1)).getDay();
      },
      _canAdjustMonth: function (inst, offset, curYear, curMonth) {
         var date = this._getNumberOfMonths(inst);
         date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : date[0] * date[1]), 1));
         return offset < 0 && date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth())), this._isInRange(inst, date);
      },
      _isInRange: function (inst, date) {
         var minDate = this._getMinMaxDate(inst, "min");
         var maxDate = this._getMinMaxDate(inst, "max");
         /** @type {null} */
         var ac = null;
         /** @type {null} */
         var out = null;
         var c = this._get(inst, "yearRange");
         return c && (inst = c.split(":"), c = (new Date).getFullYear(), ac = parseInt(inst[0], 10), out = parseInt(inst[1], 10), inst[0].match(/[+\-].*/) && (ac = ac + c), inst[1].match(/[+\-].*/) && (out = out + c)), (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!ac || date.getFullYear() >= ac) && (!out || date.getFullYear() <= out);
      },
      _getFormatConfig: function (inst) {
         var shortYearCutoff = this._get(inst, "shortYearCutoff");
         return {
            shortYearCutoff: shortYearCutoff = "string" != typeof shortYearCutoff ? shortYearCutoff : (new Date).getFullYear() % 100 + parseInt(shortYearCutoff, 10),
            dayNamesShort: this._get(inst, "dayNamesShort"),
            dayNames: this._get(inst, "dayNames"),
            monthNamesShort: this._get(inst, "monthNamesShort"),
            monthNames: this._get(inst, "monthNames")
         };
      },
      _formatDate: function (inst, day, month, year) {
         if (!day) {
            inst.currentDay = inst.selectedDay;
            inst.currentMonth = inst.selectedMonth;
            inst.currentYear = inst.selectedYear;
         }
         day = day ? "object" == typeof day ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
         return this.formatDate(this._get(inst, "dateFormat"), day, this._getFormatConfig(inst));
      }
   });
   /**
    * @param {string} options
    * @return {?}
    */
   $.fn.datepicker = function (options) {
      if (!this.length) {
         return this;
      }
      if (!$.datepicker.initialized) {
         $(document).on("mousedown", $.datepicker._checkExternalClick);
         /** @type {boolean} */
         $.datepicker.initialized = true;
      }
      if (0 === $("#" + $.datepicker._mainDivId).length) {
         $("body").append($.datepicker.dpDiv);
      }
      /** @type {!Array<?>} */
      var t = Array.prototype.slice.call(arguments, 1);
      return "string" == typeof options && ("isDisabled" === options || "getDate" === options || "widget" === options) || "option" === options && 2 === arguments.length && "string" == typeof arguments[1] ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(t)) : this.each(function () {
         if ("string" == typeof options) {
            $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(t));
         } else {
            $.datepicker._attachDatepicker(this, options);
         }
      });
   };
   $.datepicker = new Datepicker;
   /** @type {boolean} */
   $.datepicker.initialized = false;
   /** @type {number} */
   $.datepicker.uuid = (new Date).getTime();
   /** @type {string} */
   $.datepicker.version = "1.13.1";
   $.datepicker;
});

var date = new Date();
document.addEventListener('click', (event) => {

   if (event.target.closest('.new-datepicker__month-item')) {
      console.log('click --- ');

      // var date = $("#datepicker").datepicker('getDate'); 
      //   console.log(date);

      //  date.setMonth('9');
      //  $(".ui-datepicker").datepicker("setDate", date); 
      $(".ui-datepicker").datepicker("setDate", "10 12 2022");

   }

})
